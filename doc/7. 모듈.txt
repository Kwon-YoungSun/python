7. 모듈
7-1. 표준 모듈
    * 모듈 : 여러 변수와 함수를 가지고 있는 집합체로, 크게 표준 모듈과 외부 모듈로 나뉨.
        - 표준 모듈 : 파이썬에 기본적으로 내장되어 있는 모듈
        - 외부 모듈 : 다른 사람들이 만들어서 공개한 모듈

    모듈 가져오는 법 ]
        import 모듈 이름

7-1-1. 모듈 사용의 기본
    < math 모듈 >
    math 모듈은 수학과 관련된 기능을 가지고 있다.

    예 ]
        >>> import math
        >>> math.sin(1)
        0.8414709848078965
        >>> math.cos(1)
        0.5403023058681398

    * math 모듈의 함수
    sin(x)          : 사인값을 구합니다.
    cos(x)          : 코사인값을 구합니다.
    tan(x)          : 탄젠트값을 구합니다.
    log(x[, base])  : 로그값을 구합니다.
    ceil(x)         : 올림합니다.
    floor(x)        : 내림합니다.

    모듈의 모든 기능들은 외울 필요가 없고, 파이썬 라이브러리 공식 문서를 보면서 참고하면 된다.
    https://docs.python.org/3/library/index.html

    참고 ] 반올림 함수
        round() : 정수 부분이 짝수일 때 소수점이 5라면 내리고, 홀수일 때 소수점이 5라면 올리는 방식이 기본이다.
        예 ]
            >>> round(1.5)
            2   
            >>> round(2.5)
            2
            >>> round(3.5)
            4
            >>> round(4.5)
            4

        그러나 사용할 일이 거의 없으므로 이런 것이 있다고 기억하고 넘어가자.

    < from 구문 >
        모듈 중 활용하고 싶은 특정 함수나 변수만 가져오고 싶을 때 이용하는 구문
        형식 ]
            from 모듈 이름 import 가져오고 싶은 변수 또는 함수

        번거롭게 math.sin, math.cos 등 math. 을 붙일 필요가 없다.
        예 ]
            >>> from math import sin, cos, tan, floor, ceil
            >>> sin(1)
            0.8414709848078965
            >>> cos(1)
            0.5403023058681398
 
        참고 ] 모두 가져오기
            앞에 'math'를 붙이는 것이 싫고, 모든 기능을 가져오는 것이 목적이라면 * 기호를 사용한다.
            * 기호는 컴퓨터에서 '모든 것'을 의미한다. 따라서 다음과 같이 코드를 입력하면 math 모듈 내부의 모든 것을 가져오는 것을 의미한다.
                예 ] from math import *

            다만, 모든 것을 가져오면 식별자 이름에서 충돌이 발생할 수 있다.
            따라서 from 구문을 사용할 때는 최대한 필요한 것들만 가져와서 사용하는 것이 좋다.

    < as 구문 >
        모듈을 가져올 때 이름 충돌이 발생하거나, 모듈 이름이 너무 길어 짧게 줄여 사용하고자 할 때 사용
        
        형식 ]
            import 모듈 as 사용하고 싶은 식별자

7-1-2. random 모듈
    import random

    나머지 함수들은 https://docs.python.org/3/library/random.html#recipes 에서 찾아볼 것

    참고 ] 모듈 파일 이름 작성 시 주의 사항
        사용하는 모듈과 같은 이름으로 파일을 저장하고 실행하면 TypeError가 발생한다.
        
        왜? 파이썬 모듈은 사실 단순한 파이썬 파일이기 때문이다. 
        import 구문은 가장 먼저 현재 폴더에서 import 위에 적어 놓은 파일을 찾는다.
        따라서 ramdom.py라는 이름으로 파일을 저장하고 실행하면 실제 파이썬이 제공하는 random 모듈이 아닌
        같은 파일을 읽어들여 문제가 발생하는 것이다.

7-1-3. sys 모듈 : 시스템과 관련된 정보를 가지고 있는 모듈로 명령 매개변수를 받을 때 많이 사용된다.
    예 ]
        # 모듈을 읽어 들입니다.
        import sys

        # 명령 매개변수를 출력합니다
        print(sys.argv)
        print("---")

        # 컴퓨터 환경과 관련된 정보를 출력합니다.
        print("getwindowsversion:()", sys.getwindowsversion())
        print("---")
        print("copyright:", sys.copyright)
        print("---")
        print("version:", sys.version)

        # 프로그램을 강제로 종료합니다.
        sys.exit()

        > python source/day07.py 10 20 30
        ===> sys.argv에 매개변수 10, 20, 30이 들어간다.

        =====> 결과 ]
            ['source/day07.py', '10', '20', '30']
            ---
            getwindowsversion:() sys.getwindowsversion(major=10, minor=0, build=19042, platform=2, service_pack='')
            ---
            copyright: Copyright (c) 2001-2020 Python Software Foundation.
            All Rights Reserved.

            Copyright (c) 2000 BeOpen.com.
            All Rights Reserved.

            Copyright (c) 1995-2001 Corporation for National Research Initiatives.
            All Rights Reserved.

            Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
            All Rights Reserved.
            ---
            version: 3.9.1 (tags/v3.9.1:1e5d33e, Dec  7 2020, 17:08:21) [MSC v.1927 64 bit (AMD64)]

7-1-4. os 모듈 : 운영체제와 관련된 기능을 가진 모듈로, 새로운 폴더를 만들거나 폴더 내부의 파일 목록을 보는 일을 할 때 활용함

    참고 ] os.system() 함수의 위험성
        os.system() 함수는 명령어를 그냥 실행한다.
        따라서 잘못 실행하면 컴퓨터 시스템의 중요한 부분을 건드려서 컴퓨터 자원 자체를 망가뜨릴 수 있다.

        굉장히 위험할 수 있는 함수이므로 사용에 주의하자. (특히 rm 명령 사용할 때...)

7-1-5. datetime 모듈
    date(날짜), time(시간)과 관련된 모듈로, 날짜 형식을 만들 때 자주 사용하는 코드들로 구성

7-1-6. time 모듈
    시간과 관련된 기능을 다룰 때 사용함.
    유닉스 타임을 구할 때, 특정 시간 동안 코드 진행을 정지할 때 많이 사용됨.

7-1-7. urllib 모듈
    URL을 다루는 라이브러리, 즉 인터넷 주소를 활용할 때 사용하는 라이브러리

------------------------------------------------------------------------------------------------------------------------------
7-2. 외부 모듈
7-2-1. 모듈 설치하기 : cmd 창에서 설치한다.
    python -m pip install 모듈 이름

    pip 패키지 설치 가이드 문서 : https://pip.pypa.io/en/stable/user_guide/#installing-packages

7-2-2. 모듈 찾아보기 : 자신이 관심 있는 분야가 생기다 보면 저절로 찾게 됨.
    - 웹 프로그래밍 : Django, Flask
    - 기계 학습     : scikit-learn, keras
    - 스크레이핑    : requests 또는 Beautiful Soup
    - 영상 분석     : cv2 또는 pillow

    Python '내가 원하는 것(영어)' 로 검색하면 웬만해서 다 나옴.

7-2-3. BeautifulSoup 모듈
    BeautifulSoup 문서 -> https://www.crummy.com/software/BeautifulSoup/bs4/doc/
    기상청 날씨 RSS -> https://web.kma.go.kr/weather/lifenindustry/sevice_rss.jsp;jsessionid=MuQmtuXzRA9Bf69FMyFNsX8EAnYb5G80uxDZqP6E1Uvaiyai0hmrVAv2WErHq5Q9?printable=true&amp;sido=4200000000&gugun=4223000000&dong=4278033000

7-2-4. Flask 모듈
    Flask 모듈의 공식 홈페이지 : http://flask.pocoo.org/

    참고 ] Flask 코드를 실행하는 방법
        set FLASK_APP=파일 이름.py
        (python -m) flask run

        * 맥과 리눅스를 사용하는 경우
        터미널에 다음과 같이 입력한다.
        export FLASK_APP=파일 이름.py
        flask run 

        종료할 때는 Ctrl + C를 누른다.

7-2-5. 라이브러리와 프레임워크
    - 라이브러리 : 정상적인 제어를 하는 모듈
    - 프레임워크 : 제어 역전이 발생하는 모듈

    < 라이브러리 >
        개발자가 모듈의 기능을 호출하는 형태의 모듈 : math 등
    
    < 프레임워크 >
        개발자가 작성한 코드를 실행하는 형태의 모듈 : Flask 등
        ===> 개발자가 만든 함수를 모듈이 실행하는 것은 제어가 역전된 것, 바로 '제어 역전'임.

--------------------------------------------------------------------------------------------------------------------------------
좀 더 알아보기 ] 함수 데코레이터
    데코레이터 : @로 시작하는 구문
        예 ] Flask에서의 @app.route("/")

    대상 함수의 앞뒤에 꾸밀 부가적인 내용을, 혹은 반복할 내용을 데코레이터로 정의해서 손쉽게 사용할 수 있도록 한 것
    
    예 ] hello 앞에 "인사가 시작되었습니다.", hello 뒤에 "인사가 종료되었습니다" 출력하는 예제
        # 함수 데코레이터를 생성합니다.
        def test(function):
            def wrapper():
                print("인사가 시작되었습니다.")
                function()
                print("인사가 종료되었습니다.")
            return wrapper

        # 데코레이터를 붙여 함수를 만듭니다.
        @test
        def hello():
            print("hello")

        # 함수를 호출합니다.
        hello()     # hello 실행하면 test 함수가 자동으로 실행됨.


    ====> 데코레이터를 사용하면 functools라는 모듈 사용 가능 및 반복되는 구문이 많아질 때 유용하게 사용 가능하다.

    주의 ] 데코레이터는 다른 프로그래밍 언어의 어노테이션과는 전혀 다른 기능이므로 주의하자.