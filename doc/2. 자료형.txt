# day02

1. 문자열
* 자료형 확인하기
	type() 함수

	print(type("안녕하세요")) 	==> <class 'str'>
	print(type(273))		==> <class 'int'>

* 문자열 내부에 따옴표를 넣고 싶은 경우
	print(""안녕하세요" 라고 말했습니다")	==> SyntaxError
	print('"안녕하세요" 라고 말했습니다')	==> "안녕하세요" 라고 말했습니다
	print("'안녕하세요' 라고 말했습니다")	==> '안녕하세요' 라고 말했습니다
	
	혹은 이스케이프 문자(\)를 사용해도 된다.
	print("\"안녕하세요\" 라고 말했습니다")	==>  "안녕하세요" 라고 말했습니다
	print('\'배가 고픕니다\' 라고 생각했습니다')	==> '배가 고픕니다' 라고 생각했습니다

* 다양한 이스케이프 문자
\n : 줄바꿈을 의미
\t : 탭을 의미

* 여러 줄 문자열 만들기 : """ ~~~ """ 또는 ''' ~~~ '''
print("""동해물과 백두산이 마르고 닳도록
하느님이 보우하사 우리나라 만세
무궁화 삼천리 화려강산 대한사람
대한으로 길이 보전하세""")

------------------------------------------------------------------------------------------------------------------------------------

1-1. 문자열 연산자

1) 문자열 연결 연산자 : +
	"문자열" + "문자열"
	
	문자열은 무조건 문자열끼리 연결해야 하고, 숫자라 하더라도 큰따옴표를 붙여 문자열로 인식시켜야만 한다.

	예 ]
		print("안녕" + "하세요")	==> 안녕하세요
		print("안녕하세요" + 1)	==> TypeError
		print("안녕하세요" + "1")	==> 안녕하세요1

2) 문자열 반복 연산자 : *
	"문자열" * 숫자 또는 숫자 * "문자열"

	예 ]
		print(3 * "안녕하세요")	==> 안녕하세요안녕하세요안녕하세요

3) 문자 선택 연산자(인덱싱) : [ ]
	문자열 내부의 문자 하나를 선택하는 연산자
	'제로 인덱스'(0부터 시작)이다

	예 ]
		print("안녕하세요"[0])	==> 안
		print("안녕하세요"[1])	==> 녕
		print("안녕하세요"[2])	==> 하
		print("안녕하세요"[3])	==> 세
		print("안녕하세요"[4])	==> 요

		print("안녕하세요"[-1])	==> 요
		print("안녕하세요"[-2])	==> 세
		print("안녕하세요"[-3])	==> 하
		print("안녕하세요"[-4])	==> 녕
		print("안녕하세요"[-5])	==> 안

4) 문자열 범위 선택 연산자(슬라이싱) : [:]
	문자열의 특정 범위를 선택할 때 사용하는 연산자	

	예 ]
		print("안녕하세요"[1:4])	==> 녕하세

	앞의 숫자 ~ 뒤의 숫자 - 1 만큼 선택된다.
	대괄호 안에 넣는 숫자 둘 중 하나를 생략할 수 있다.

	예 ]
		print("안녕하세요"[1:])	==> 녕하세요
		print("안녕하세요"[:3])	==> 안녕하

참고 ] 슬라이싱을 해도 원본은 변하지 않는다.
	>>> hello = "안녕하세요"
	>>> print(hello[0:2])
	안녕
	>>> hello
	'안녕하세요'

참고 ] IndexError(Index out of range) 예외
	print("안녕하세요"[10])	==>	IndexError 발생


1-2. 문자열의 길이 구하기

len() 함수 사용
	print(len("안녕하세요"))	==> 5

------------------------------------------------------------------------------------------------------------------------------------

2. 숫자

int(integer) : 정수
float(floating point) : 실수

참고 ] 파이썬에서의 지수 표현

	예 ]
		0.52273e2	==> 0.52273 * 10^2 = 522.273
		0.52273e-2	==> 0.52273 * 10^-2 = 0.0052273

2-1. 숫자 연산자
1) 사칙 연산자 : +, -, *, /
	주의 ] 파이썬에서는 JAVA나 C언어와 달리 나눗셈 연산( / )을 할 때, 자동 형변환이 된다.
		예 ]
			5 / 7	==>	0 (X)
				==>	0.7142857142857143 (O)

2) 정수 나누기 연산자 : //
	소수점을 뗀 정수 결과만 출력됨
		예 ]
			5 // 7	==>	0

3) 나머지 연산자 : %

4) 제곱 연산자 : **
	예 ]
		2^4	==>	2**4

2-2. 연산자의 우선순위
	일반적으로 생각하는 산수와 같다.

참고 ] TypeError 예외
	서로 다른 자료를 연산하면 발생하는 예외

------------------------------------------------------------------------------------------------------------------------------------

3. 변수와 입력

3-1. 변수 만들기/사용하기

>>> pi = 3.14159265	<== 변수 선언 및 변수에 값 할당
>>> pi			<== 변수 참조
3.14159265

파이썬은 변수에 자료형을 지정하지 않으므로 같은 변수에 여러 종류의 자료형을 넣을 수 있다.
그러나 TypeError가 발생할 위험이 있으므로 하나의 변수에는 되도록 하나의 자료형을 넣어 활용하자.

3-2. 복합 대입 연산자
	1) 숫자 복합 대입 연산자
			+=, -=, *=, /=, %=, **=
		예 ]
			number = 100
			number += 10	==	number = number + 10, 110
			number -= 10	==	number = number - 10, 90
			number *= 10	==	number = number * 10, 1000
			number /= 10	==	number = number / 10, 10
			number %= 10	==	number = number % 10, 0
			number **= 10	==	number = number ** 10, 100 * 10^10

	2) 문자열 복합 대입 연산자
			+=, *=
		예 ]
			>>> string = "안녕하세요"
			>>> string += "!"
			>>> string += "!"
			>>> print("string:", string)
			string: 안녕하세요!!
	

3-2. 사용자 입력 : input()
	
	예 ]
		input("표시할 문구~~")
			또는
		변수 = input("표시할 문구~~~")

	input() 함수는 무엇을 입력하더라도 결과가 무조건 문자열 자료형 이다.

3-3. 문자열을 숫자로 바꾸기	
	- int() 함수	: 문자열 --> int
	- float() 함수	: 문자열 --> float


* ValueError 예외
- 숫자가 아닌 것을 숫자로 변환하려고 할 때
	예 ]
		int("안녕하세요")
		float("안녕하세요")

- 소수점이 있는 숫자 형식의 문자열을 int() 함수로 변환하려고 할 때
	예 ]
		int("52.273")

3-4. 숫자를 문자열로 바꾸기
	str(다른 자료형)

------------------------------------------------------------------------------------------------------------------------------------

4. 숫자와 문자열의 다양한 기능

4-1. 문자열의 format() 함수
	format()	==> 문자열이 가지고 있는 함수
	앞쪽의 문자열의 {} 기호가 format() 함수 괄호 안에 있는 매개 변수를 차례로 대치되면서
	숫자가 문자열이 되는 것이다.
	
	예 ]
		>>> "{}".format(10)
		'10'
		>>> "{} {}".format(10, 20)
		'10 20'
		>>> "{} {} {} {} {}".format(101, 202, 303, 404, 505)
		'101 202 303 404 505'

* IndexError 예외
	{} 기호의 개수가 format() 함수의 매개변수보다 많으면 발생함.
	예 ]
		"{} {} {}".format(1, 2)	<==	Error!

4-2. format() 함수의 다양한 기능

1) 정수 출력의 다양한 형태
	# 정수
		output_a = "{:d}".format(52)		<== 52

	# 특정 칸에 출력하기
		output_b = "{:5d}".format(52)	<==    52(5칸을 잡고 뒤에서부터 52 채움)
		output_c = "{:10d}".format(52)	<==        52(10칸을 잡고 뒤에서부터 52 채움)

	# 빈칸을 0으로 채우기
		output_d = "{:05d}".format(52)	<== 00052(5칸 중 빈칸은 0으로)
		output_e = "{:05d}".format(-52)	<== -0052(5칸 중 음수 부호 제외하고 빈칸은 0으로)

	# 기호와 함께 출력하기
		output_f = "{:+d}".format(52)		<== +52
		output_g = "{:+d}".format(-52)	<== -52
		output_h = "{: d}".format(52)		<==  52(맨 앞 한 칸 공백)
		output_i = "{: d}".format(-52)		<== -52(공백 자리에 음수 부호)

	# 조합하기
		output_h = "{:+5d}".format(52)	<==   +52(기호를 뒤로 밀기: 양수)
		output_i = "{:+5d}".format(-52)	<==   -52(기호를 뒤로 밀기: 음수)
		output_j = "{:=+5d}".format(52)	<== +  52(기호를 앞으로 밀기: 양수)
		output_k = "{:=+5d}".format(-52)	<== -  52(기호를 앞으로 밀기: 음수)
		output_l = "{:+05d}".format(52)	<== +0052(0으로 채우기: 양수)
		output_m = "{:+05d}".format(-52)	<== -0052(0으로 채우기: 음수)

2) 부동 소수점 출력의 다양한 형태
	# float 자료형 기본 
		output_a = "{:f}".format(52.273)
		output_b = "{:15f}".format(52.273)      # 15칸 만들기
		output_c = "{:+15f}".format(52.273)     # 15칸에 부호 추가하기
		output_d = "{:+015f}".format(52.273)    # 15칸에 부호 추가하고 0으로 채우기
		print(output_a)
		print(output_b)
		print(output_c)
		print(output_d)
==> 실행 결과 ]
52.273000
      52.273000
     +52.273000
+0000052.273000
	
	# 소수점 아래 자릿수 지정하기
		output_a = "{:15.3f}".format(52.273)
		output_b = "{:15.2f}".format(52.273)
		output_c = "{:15.1f}".format(52.273)
		print(output_a)
		print(output_b)
		print(output_c)
==> 실행 결과 ]
         52.273
          52.27
           52.3

3) 의미 없는 소수점 제거하기
	output_a = 52.0
	output_b = "{:g}".format(output_a)
	print(output_a)
	print(output_b)
==> 실행 결과 ]
52.0
52

4-3. 대소문자 바꾸기 : upper()와 lower()
- upper()	: 문자열의 알파벳을 대문자로
	예 ]
		>>> a = "Hello Python Programming...!"
		>>> a.upper()
		'HELLO PYTHON PROGRAMMING...!'
- lower() : 문자열의 알파벳을 소문자로
	예 ]
		>>> a.lower()
		'hello python programming...!'

	참고 ] 파괴적 함수와 비파괴적 함수
		원본을 변화시키지 않는 함수를 비파괴적 함수라고 부른다.
		upper()과 lower()는 비파괴적 함수이다.

4-4. 문자열 양옆의 공백 제거하기 : strip()
- strip() : 문자열 양옆의 공백 제거
	예 ]
		>>> input_a = "  Hello   "
		>>> print(input_a)
		  Hello   
		>>> print(input_a.strip())
		Hello
- lstrip() : 문자열 왼쪽의 공백 제거		<== 거의 사용 안함
- rstrip() : 문자열 오른쪽의 공백 제거		<== 거의 사용 안함

4-5. 문자열의 구성 파악하기 : is○○
- isalnum()	: 문자열이 알파벳 또는 숫자로만 구성되어 있는지 확인
- isalpha()	: 문자열이 알파벳으로만 구성되어 있는지 확인
...
==> 다 외우려 하지 말고 그때그때 찾아보자(p.101)

4-6. 문자열 찾기 : find()와 rfind()
- find()	: 왼쪽부터 찾아서 처음 등장하는 위치 찾기
	예 ]
		>>> output_a = "안녕안녕하세요".find("안녕")
		>>> print(output_a)
		0
- rfind()	: 오른쪽부터 찾아서 처음 등장하는 위치 찾기
	예 ]
		>>> output_b = "안녕안녕하세요".rfind("안녕")
		>>> print(output_b)
		2
		==> 두번째 안녕은 2번째부터 등장함.(0부터 셈)

4-7. 문자열과 in 연산자
	문자열 내부에 어떤 문자열이 있는지 확인하려고 사용
	있으면 True, 없으면 False
	예 ]
		>>> print("안녕" in "안녕하세요")
		True
		>>> print("잘자" in "안녕하세요")
		False

4-8. 문자열 자르기 : split()
	문자열을 특정한 문자로 자를 때 사용
	예 ]
		>>> a = "10 20 30 40 50".split(" ")
		>>> print(a)
		['10', '20', '30', '40', '50']	<==	실행결과 : 리스트(list)
	
